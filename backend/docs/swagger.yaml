basePath: /api
definitions:
  controller.BoardShareFragmentResponse:
    properties:
      share_fragment:
        type: string
    type: object
  controller.CreateBoardRequest:
    properties:
      data:
        example: '{"nodes":[],"edges":[]}'
        type: string
      owner:
        type: string
      password:
        example: secret
        type: string
      title:
        example: My Board
        type: string
    type: object
  controller.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controller.UpdateBoardRequest:
    properties:
      data:
        example: '{"nodes":[],"edges":[]}'
        type: string
      password:
        example: newsecret
        type: string
      title:
        example: Updated Board
        type: string
    type: object
  model.Board:
    properties:
      created_at:
        type: string
      data:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      owner:
        type: string
      password:
        type: string
      share_fragment:
        type: string
      title:
        type: string
    type: object
  model.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      provider:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API documentation for the Microservice Architecture Builder
    backend.
  title: Microservice Architecture Builder API
  version: "1.0"
paths:
  /board/:
    get:
      consumes:
      - application/json
      description: Get a list of all boards
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Board'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all boards
      tags:
      - boards
    post:
      consumes:
      - application/json
      description: 'Create a new board. Allowed fields in the request body:'
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Board creation payload
        in: body
        name: board
        required: true
        schema:
          $ref: '#/definitions/controller.CreateBoardRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Board'
        "400":
          description: 'Bad Request. Example: {\"error\": \"unexpected fields: [foo,
            bar]\"}'
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new board
      tags:
      - boards
  /board/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a board by its unique ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Board ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a board by ID
      tags:
      - boards
    get:
      consumes:
      - application/json
      description: Get a board by its unique ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Board ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Board'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a board by ID
      tags:
      - boards
    patch:
      consumes:
      - application/json
      description: 'Update a board''s details by its unique ID. Allowed fields in
        the request body:'
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Board ID
        in: path
        name: id
        required: true
        type: string
      - description: Board update payload
        in: body
        name: board
        required: true
        schema:
          $ref: '#/definitions/controller.UpdateBoardRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Board'
        "400":
          description: 'Bad Request. Example: {\"error\": \"unexpected fields: [foo,
            bar]\"} or {\"error\": \"at least one of title, data, password is required\"}'
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a board by ID
      tags:
      - boards
  /board/{id}/sharefragment:
    get:
      consumes:
      - application/json
      description: Get only the share_fragment field for a board by its unique ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Board ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.BoardShareFragmentResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - Bearer: []
      summary: Get the share fragment of a board by ID
      tags:
      - boards
  /users/me:
    get:
      consumes:
      - application/json
      description: Get the details of the currently authenticated user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - Bearer: []
      summary: Get current user
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
