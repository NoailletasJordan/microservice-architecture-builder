name: Tests and deploy
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  tests:
    name: Run E2E Tests
    timeout-minutes: 60
    env:
      RAN_ON_GITHUB: ${{ secrets.RAN_ON_GITHUB }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npx playwright test
        env:
          VITE_POSTHOG_HOST: 'wrongOnPurpose'
          VITE_POSTHOG_KEY: 'wrongOnPurpose'
          VITE_POSTHOG_REVERSE_PROXY_URL: 'wrongOnPurpose'

      - name: Upload test report
        if: ${{ env.RAN_ON_GITHUB == 'true' && !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  triggerDeploy:
    name: Call Deploy job
    needs: tests
    uses: ./.github/workflows/callable-deploy.yml
    with:
      event_name: ${{ github.event_name }}
    secrets: inherit

  notifyMe:
    if: always() && github.event_name == 'push'
    env:
      RAN_ON_GITHUB: ${{ secrets.RAN_ON_GITHUB }}
    name: Send Deployment Notifications
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Notify on success
        if: ${{ needs.tests.result == 'success' && env.RAN_ON_GITHUB == 'true' }}
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d '{"content": "✅ CI succeeded!"}' \
          ${{ secrets.DISCORD_BOT_WEBHOOK_URL }}

      - name: Notify on failure
        if: ${{ needs.tests.result != 'success' && env.RAN_ON_GITHUB == 'true' }}
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d '{"content": "❌ CI failed!"}' \
          ${{ secrets.DISCORD_BOT_WEBHOOK_URL }}
