package main

import (
	"fmt"
	"log"
	"net/http"
	"os"

	"microservice-architecture-builder/backend/controller"
	"microservice-architecture-builder/backend/data"
	helpers "microservice-architecture-builder/backend/helpers"
	"microservice-architecture-builder/backend/server"
	"microservice-architecture-builder/backend/service"
	"microservice-architecture-builder/backend/tests"

	"github.com/rs/cors"

	_ "microservice-architecture-builder/backend/docs" // docs is generated by Swag CLI, you have to import it.
)

// @title Microservice Architecture Builder API
// @version 1.0
// @description This is the API documentation for the Microservice Architecture Builder backend.
// @host localhost:8080
// @BasePath /api
// @securityDefinitions.apikey Bearer
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.
func main() {
	// Initialize dependencies
	dsn := os.Getenv("POSTGRES_DSN")
	if dsn == "" {
		log.Fatalf("POSTGRES_DSN is not set")
	}
	db, err := server.NewPostgresDB(dsn)
	if err != nil {
		log.Fatalf("Failed to connect to PostgreSQL: %v", err)
	}
	defer db.Close()

	userStore := data.NewUserStore(db)
	userService := service.NewUserService(userStore)
	userController := controller.NewUserController(userService)

	boardStore := data.NewBoardStore(db)
	boardService := service.NewBoardService(boardStore, userService)
	boardController := controller.NewBoardController(boardService)

	// Special env var, to be injected only on e2e test
	var oauthHandler func(code string) (*helpers.GoogleUserResponse, error)
	if os.Getenv("MOCK_OAUTH") == "true" {
		oauthHandler = tests.GetUserStructFromGoogleMock
	} else {
		oauthHandler = helpers.GetUserStructFromGoogle
	}
	oauthController := controller.NewOAuthController(oauthHandler, userService)

	r := server.NewServer(boardController, userController, userService, oauthController)

	// Add CORS middleware to allow frontend dev server
	frontendOrigin := os.Getenv("FRONTEND_URL")
	if frontendOrigin == "" {
		log.Fatalf("FRONTEND_URL is not set")
	}

	handler := cors.New(cors.Options{
		AllowedOrigins:   []string{frontendOrigin},
		AllowCredentials: true,
		AllowedMethods:   []string{"GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"*"},
	}).Handler(r)

	// Start server
	port := ":8080"
	fmt.Printf("Server starting on port %s\n", port)
	log.Fatal(http.ListenAndServe(port, handler))
}
